from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from telegram.constants import ChatAction
import sqlite3
import datetime

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = '7624710888:AAHAIYsOjoWTCvtUVlx6XwnEWI-eyLuPok8'
ADMIN_IDS = [992028570207, 992928570207]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# === –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ===
conn = sqlite3.connect('cargo.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS cargo (
        tracking_number TEXT PRIMARY KEY,
        status TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        tracking_number TEXT,
        action TEXT,
        status TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
    )
''')

conn.commit()

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===
async def send_typing_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

def log_action(tracking_number, action, status):
    cursor.execute('INSERT INTO log (tracking_number, action, status) VALUES (?, ?, ?)',
                   (tracking_number, action, status))
    conn.commit()

def get_today_logs():
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    cursor.execute('''
        SELECT tracking_number, action, status, strftime('%H:%M', timestamp)
        FROM log
        WHERE date(timestamp) = ?
    ''', (today,))
    return cursor.fetchall()

# === –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)

    keyboard = [
        ["üõ† –Ø –∞–¥–º–∏–Ω", "üë§ –Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! ‚úã\n"
        "–°–∞–ª–æ–º! ‚úã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã: üëá\n"
        "–õ—É—Ç—Ñ–∞–Ω –∏–Ω—Ç–∏—Ö–æ–± –∫—É–Ω–µ–¥:",
        reply_markup=reply_markup
    )

async def role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üõ† –Ø –∞–¥–º–∏–Ω":
        await update.message.reply_text(
            "üîë –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add <–Ω–æ–º–µ—Ä> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä ‚ûï\n"
            "/arrived <–Ω–æ–º–µ—Ä> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏–±—ã—Ç–∏–µ ‚úà\n"
            "/today ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è üìã",
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    elif text == "üë§ –Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å":
        await update.message.reply_text(
            "üë§ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status <–Ω–æ–º–µ—Ä> ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ üì¶",
            reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫! üëá"
        )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)
    if len(context.args) != 1:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–∫: /status <–Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞> ‚ùó\n"
            "–õ—É—Ç—Ñ–∞–Ω —á—É–Ω–∏–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥: /status <—Ä–∞“õ–∞–º–∏ –±–æ—Ä>",
        )
        return

    tracking_number = context.args[0]
    cursor.execute('SELECT status FROM cargo WHERE tracking_number = ?', (tracking_number,))
    result = cursor.fetchone()

    if result:
        await update.message.reply_text(
            f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ üì¶ {tracking_number}:\n"
            f"{result[0]} ‚úÖ\n\n"
            f"–í–∞–∑—ä–∏ –±–æ—Ä üì¶ {tracking_number}:\n"
            f"{result[0]} ‚úÖ",
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            f"–¢–æ–≤–∞—Ä —Å –Ω–æ–º–µ—Ä–æ–º {tracking_number} –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå\n"
            f"–ë–æ—Ä–∏ —Ä–∞“õ–∞–º–∏ {tracking_number} —ë—Ñ—Ç –Ω–∞—à—É–¥ ‚ùå",
            parse_mode="Markdown"
        )

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. ‚ùó\n–®—É–º–æ –∏“∑–æ–∑–∞—Ç –Ω–∞–¥–æ—Ä–µ–¥.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–∫: /add <–Ω–æ–º–µ—Ä> üì¶\n–õ—É—Ç—Ñ–∞–Ω —á—É–Ω–∏–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥: /add <—Ä–∞“õ–∞–º>")
        return

    tracking_number = context.args[0]

    cursor.execute('INSERT OR REPLACE INTO cargo (tracking_number, status) VALUES (?, ?)',
                   (tracking_number, '–¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ'))
    conn.commit()
    log_action(tracking_number, '–î–æ–±–∞–≤–ª–µ–Ω', '–¢–æ–≤–∞—Ä –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ –≤ –ö–∏—Ç–∞–µ')

    await update.message.reply_text(
        f"–¢–æ–≤–∞—Ä {tracking_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! ‚úÖ\n"
        f"–ë–æ—Ä–∏ —Ä–∞“õ–∞–º–∏ {tracking_number} –±–æ –º—É–≤–∞—Ñ—Ñ–∞“õ–∏—è—Ç –∏–ª–æ–≤–∞ —à—É–¥! ‚úÖ",
        parse_mode="Markdown"
    )

async def arrived(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. ‚ùó\n–®—É–º–æ –∏“∑–æ–∑–∞—Ç –Ω–∞–¥–æ—Ä–µ–¥.")
        return

    if len(context.args) != 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–∫: /arrived <–Ω–æ–º–µ—Ä> ‚úà\n–õ—É—Ç—Ñ–∞–Ω —á—É–Ω–∏–Ω —Ñ–∏—Ä–∏—Å—Ç–µ–¥: /arrived <—Ä–∞“õ–∞–º>")
        return

    tracking_number = context.args[0]

    cursor.execute('UPDATE cargo SET status = ? WHERE tracking_number = ?',
                   ('–¢–æ–≤–∞—Ä –ø—Ä–∏–±—ã–ª –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω', tracking_number))
    conn.commit()
    log_action(tracking_number, '–û–±–Ω–æ–≤–ª–µ–Ω', '–¢–æ–≤–∞—Ä –ø—Ä–∏–±—ã–ª –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω')

    await update.message.reply_text(
        f"–°—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞ {tracking_number} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ '–¢–æ–≤–∞—Ä –ø—Ä–∏–±—ã–ª –≤ –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω' ‚úà‚úÖ\n"
        f"–í–∞–∑—ä–∏ –±–æ—Ä–∏ {tracking_number} –±–∞ '–ë–∞ –¢–æ“∑–∏–∫–∏—Å—Ç–æ–Ω —Ä–∞—Å–∏–¥' –Ω–∞–≤—Å–æ–∑”£ —à—É–¥ ‚úà‚úÖ",
        parse_mode="Markdown"
    )

async def today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_typing_action(update, context)
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ. ‚ùó\n–®—É–º–æ –∏“∑–æ–∑–∞—Ç –Ω–∞–¥–æ—Ä–µ–¥.")
        return

    logs = get_today_logs()

    if not logs:
        await update.message.reply_text(
            "–°–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π. üìã\n–ò–º—Ä”Ø–∑ —è–≥–æ–Ω –∞–º–∞–ª–∏—ë—Ç –∞–Ω“∑–æ–º –¥–æ–¥–∞ –Ω–∞—à—É–¥–∞–∞—Å—Ç. üìã"
        )
        return

    added = sum(1 for log in logs if log[1] == '–î–æ–±–∞–≤–ª–µ–Ω')
    updated = sum(1 for log in logs if log[1] == '–û–±–Ω–æ–≤–ª–µ–Ω')

    message = f"üìã *–û—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
    message += f"‚ûî –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {added} üì¶\n"
    message += f"‚ûî –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤: {updated} ‚úè\n\n"

    message += "üìã *–ò–º—Ä”Ø–∑:*\n"
    message += f"‚ûî –ë–æ—Ä“≥–æ –∏–ª–æ–≤–∞ —à—É–¥: {added} üì¶\n"
    message += f"‚ûî –í–∞–∑—ä–∏ –±–æ—Ä“≥–æ –Ω–∞–≤—Å–æ–∑”£ —à—É–¥: {updated} ‚úè\n\n"

    for num, (tracking_number, action, status, time) in enumerate(logs, 1):
        icon = "‚ûï" if action == '–î–æ–±–∞–≤–ª–µ–Ω' else "‚úè"
        message += f"{num}. {tracking_number} {icon} {status} ({time})\n"

    await update.message.reply_text(message, parse_mode="Markdown")

# === –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = ApplicationBuilder().token(BOT_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("status", status))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("arrived", arrived))
app.add_handler(CommandHandler("today", today))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, role_selection))

print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
